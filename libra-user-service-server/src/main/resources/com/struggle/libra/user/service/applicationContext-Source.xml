<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- mybatis -->
    <context:annotation-config/>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.struggle.libra.user.service.mybatis"/>
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="${source.mysql.druid.service.url}" />
        <property name="username" value="${source.mysql.druid.service.userName}" />
        <property name="password" value="${source.mysql.druid.service.passWord}" />
        <property name="driverClassName" value="${source.mysql.druid.service.className}" />
        <property name="maxActive" value="${source.mysql.druid.service.connection.max.active}" />
        <property name="initialSize" value="${source.mysql.druid.service.connection.min.active}" />
        <property name="maxWait" value="${source.mysql.druid.service.connection.max.wait}" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxOpenPreparedStatements" value="100"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testWhileIdle" value="true"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 缓存集群 -->
    <bean id="codisFactory" class="com.yueke.gemini.common.data.codis.CodisFactory">
        <constructor-arg name="connectConfig">
            <bean class="com.yueke.gemini.common.data.codis.entities.ConnectConfig">
                <property name="address" value="${source.redis.service.list}"/>
                <property name="passWord" value="${source.redis.service.auth}"/>
                <property name="connectionTimeout" value="${source.redis.service.time}"/>
                <property name="database" value="0"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="poolConfig">
            <bean class="redis.clients.jedis.JedisPoolConfig">
                <property name="maxIdle" value="200"/>
                <property name="maxTotal" value="1000"/>
                <property name="maxWaitMillis" value="10000"/>
                <property name="testOnBorrow" value="true"/>
                <property name="testOnReturn" value="true"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- 分布式锁 -->
    <bean id="distributedLock" class="com.yueke.gemini.common.locker.base.DistributedLock">
        <constructor-arg name="locker">
            <bean class="com.yueke.gemini.common.locker.codis.locker.CodisLocker">
                <constructor-arg name="codisFactory" ref="codisFactory"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="namespace" value="taurus-meta-service"/>
    </bean>
</beans>